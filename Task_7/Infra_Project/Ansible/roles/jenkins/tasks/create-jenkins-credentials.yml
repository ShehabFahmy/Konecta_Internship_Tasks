- name: Get private key path from Terraform
  command: terraform output -raw private-key-path
  args:
    chdir: ../Terraform
  register: tf_private_key_path
  delegate_to: localhost
  run_once: true
  become: false

- name: Read SSH private key file
  slurp:
    src: "{{ tf_private_key_path.stdout }}"
  register: ssh_private_key_raw
  delegate_to: localhost
  run_once: true
  become: false

- name: Decode SSH private key
  set_fact:
    ssh_private_key_file_contents: "{{ ssh_private_key_raw.content | b64decode }}"

- name: Create Jenkins credentials (Ansible SSH Private Key)
  copy:
    dest: /var/lib/jenkins/init.groovy.d/create-jenkins-credentials.groovy
    content: |
      import jenkins.model.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.domains.*
      import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
      import hudson.util.Secret

      def instance = Jenkins.getInstance()
      def creds_store = instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      def sshCredsId = "{{ ansible_ssh_key_cred_id }}"
      def sshUser = "{{ ansible_ssh_key_user }}"
      def privateKey = """{{ ssh_private_key_file_contents | replace("\r", "") }}"""

      def sshExisting = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
          com.cloudbees.plugins.credentials.common.StandardCredentials.class,
          instance,
          null,
          null
      ).find { it.id == sshCredsId }

      if (sshExisting == null) {
          def keySource = new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(privateKey)
          def sshCred = new BasicSSHUserPrivateKey(
              CredentialsScope.GLOBAL,
              sshCredsId,
              sshUser,
              keySource,
              null,
              "Ansible SSH Private Key"
          )
          creds_store.addCredentials(Domain.global(), sshCred)
          println("Created new SSH key credentials.")
      } else {
          println("SSH credentials already exist.")
      }

      instance.save()
    owner: jenkins
    group: jenkins
    mode: '0644'
  become: yes
  notify: Restart Jenkins
